; *** Header ***
(provide 'ew-parse)
(require 'ew-data)
(require 'lr-driver)

; *** Token Definitions ***
(defconst ew:*eoi*-tok	0)
(defconst ew:anchor-tok	1)
(defconst ew:tag-mailbox-tok	2)
(defconst ew:tag-mailbox*-tok	3)
(defconst ew:tag-mailbox+-tok	4)
(defconst ew:tag-address*-tok	5)
(defconst ew:tag-address+-tok	6)
(defconst ew:tag-phrase*-tok	7)
(defconst ew:tag-phrase-msg-id*-tok	8)
(defconst ew:lt-tok	9)
(defconst ew:gt-tok	10)
(defconst ew:at-tok	11)
(defconst ew:comma-tok	12)
(defconst ew:semicolon-tok	13)
(defconst ew:colon-tok	14)
(defconst ew:dot-tok	15)
(defconst ew:atom-tok	16)
(defconst ew:slash-tok	17)
(defconst ew:question-tok	18)
(defconst ew:equal-tok	19)
(defconst ew:token-tok	20)
(defconst ew:us-texts-tok	21)
(defconst ew:us-wsp-tok	22)
(defconst ew:us-fold-tok	23)
(defconst ew:wsp-tok	24)
(defconst ew:fold-tok	25)
(defconst ew:qs-begin-tok	26)
(defconst ew:qs-end-tok	27)
(defconst ew:qs-texts-tok	28)
(defconst ew:qs-wsp-tok	29)
(defconst ew:qs-fold-tok	30)
(defconst ew:qs-qfold-tok	31)
(defconst ew:qs-qpair-tok	32)
(defconst ew:dl-begin-tok	33)
(defconst ew:dl-end-tok	34)
(defconst ew:dl-texts-tok	35)
(defconst ew:dl-wsp-tok	36)
(defconst ew:dl-fold-tok	37)
(defconst ew:dl-qfold-tok	38)
(defconst ew:dl-qpair-tok	39)
(defconst ew:cm-begin-tok	40)
(defconst ew:cm-end-tok	41)
(defconst ew:cm-nested-begin-tok	42)
(defconst ew:cm-nested-end-tok	43)
(defconst ew:cm-texts-tok	44)
(defconst ew:cm-wsp-tok	45)
(defconst ew:cm-fold-tok	46)
(defconst ew:cm-qfold-tok	47)
(defconst ew:cm-qpair-tok	48)
(defconst ew:err-tok	49)

(defconst ew:token-defs
  (list 
   (cons 0 "*eoi*")
   (cons 1 "anchor")
   (cons 2 "tag-mailbox")
   (cons 3 "tag-mailbox*")
   (cons 4 "tag-mailbox+")
   (cons 5 "tag-address*")
   (cons 6 "tag-address+")
   (cons 7 "tag-phrase*")
   (cons 8 "tag-phrase-msg-id*")
   (cons 9 "lt")
   (cons 10 "gt")
   (cons 11 "at")
   (cons 12 "comma")
   (cons 13 "semicolon")
   (cons 14 "colon")
   (cons 15 "dot")
   (cons 16 "atom")
   (cons 17 "slash")
   (cons 18 "question")
   (cons 19 "equal")
   (cons 20 "token")
   (cons 21 "us-texts")
   (cons 22 "us-wsp")
   (cons 23 "us-fold")
   (cons 24 "wsp")
   (cons 25 "fold")
   (cons 26 "qs-begin")
   (cons 27 "qs-end")
   (cons 28 "qs-texts")
   (cons 29 "qs-wsp")
   (cons 30 "qs-fold")
   (cons 31 "qs-qfold")
   (cons 32 "qs-qpair")
   (cons 33 "dl-begin")
   (cons 34 "dl-end")
   (cons 35 "dl-texts")
   (cons 36 "dl-wsp")
   (cons 37 "dl-fold")
   (cons 38 "dl-qfold")
   (cons 39 "dl-qpair")
   (cons 40 "cm-begin")
   (cons 41 "cm-end")
   (cons 42 "cm-nested-begin")
   (cons 43 "cm-nested-end")
   (cons 44 "cm-texts")
   (cons 45 "cm-wsp")
   (cons 46 "cm-fold")
   (cons 47 "cm-qfold")
   (cons 48 "cm-qpair")
   (cons 49 "err")
  ))

; *** Action Table ***
(defconst ew:action-table
  [
     ((default . *error*) (2 . 7) (3 . 6) (4 . 5) (5 . 4) (6 . 3) (7 . 2) (8 . 1))
     ((default . -61))
     ((default . -61))
     ((default . -61))
     ((default . -61))
     ((default . -61))
     ((default . -61))
     ((default . -61))
     ((default . *error*) (0 . 16))
     ((default . -51) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . -53) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . *error*) (9 . 34) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . -9) (9 . 34) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . *error*) (9 . 34) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . -30) (9 . 34) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . *error*) (9 . 34) (16 . 21) (24 . 20) (25 . 19) (26 . 18) (40 . 17))
     ((default . -1) (0 . accept))
     ((default . -90))
     ((default . -76))
     ((default . -63))
     ((default . -62))
     ((default . -61))
     ((default . -64))
     ((default . -61))
     ((default . -48))
     ((default . -49))
     ((default . -8) (9 . 34))
     ((default . -57))
     ((default . -37))
     ((default . -36) (16 . 21) (26 . 18))
     ((default . -52))
     ((default . -54) (12 . 60))
     ((default . -7))
     ((default . -55))
     ((default . -61))
     ((default . -43) (11 . 63))
     ((default . -37) (15 . -25) (11 . -25))
     ((default . -29))
     ((default . *error*) (9 . 34) (14 . 68))
     ((default . -13))
     ((default . *error*) (11 . 63) (15 . 71))
     ((default . -14))
     ((default . -27))
     ((default . -11))
     ((default . -6) (12 . 60))
     ((default . -10) (12 . 60))
     ((default . -5))
     ((default . *error*) (9 . 34))
     ((default . -4) (12 . 60))
     ((default . -32))
     ((default . -31) (12 . 60))
     ((default . -3))
     ((default . -2))
     ((default . *error*) (41 . 83) (42 . 82) (43 . 81) (44 . 80) (45 . 79) (46 . 78) (47 . 77) (48 . 76))
     ((default . *error*) (27 . 89) (28 . 88) (29 . 87) (30 . 86) (31 . 85) (32 . 84))
     ((default . -74) (24 . 20) (25 . 19) (40 . 17))
     ((default . -72) (24 . 20) (25 . 19) (40 . 17))
     ((default . *error*) (16 . 21) (26 . 18))
     ((default . -51) (16 . 21) (26 . 18))
     ((default . -38))
     ((default . -61))
     ((default . *error*) (16 . 21) (26 . 18))
     ((default . -65) (24 . 20) (25 . 19) (40 . 17))
     ((default . -61))
     ((default . *error*) (16 . 21) (33 . 96))
     ((default . *error*) (16 . 21) (26 . 18))
     ((default . *error*) (12 . 60) (14 . 68))
     ((default . -44))
     ((default . -61))
     ((default . -30) (9 . 34) (16 . 21) (26 . 18))
     ((default . -28))
     ((default . -61))
     ((default . *error*) (16 . 21) (26 . 18))
     ((default . *error*) (16 . 21) (33 . 96))
     ((default . *error*) (9 . 34) (16 . 21) (26 . 18))
     ((default . *error*) (9 . 34) (16 . 21) (26 . 18))
     ((default . -97))
     ((default . -96))
     ((default . -95))
     ((default . -94))
     ((default . -93))
     ((default . -92))
     ((default . -91))
     ((default . -89))
     ((default . -81))
     ((default . -80))
     ((default . -79))
     ((default . -78))
     ((default . -77))
     ((default . -75))
     ((default . -25))
     ((default . *error*) (10 . 113))
     ((default . -58))
     ((default . -68) (24 . 20) (25 . 19) (40 . 17))
     ((default . -56))
     ((default . -67) (24 . 20) (25 . 19) (40 . 17))
     ((default . -83))
     ((default . -61))
     ((default . -21))
     ((default . -46))
     ((default . -19))
     ((default . -45))
     ((default . -40) (15 . 71))
     ((default . *error*) (10 . 113))
     ((default . -39))
     ((default . *error*) (11 . 63))
     ((default . -70) (24 . 20) (25 . 19) (40 . 17))
     ((default . *error*) (13 . 120))
     ((default . -71) (24 . 20) (25 . 19) (40 . 17))
     ((default . -26))
     ((default . -15) (15 . 71))
     ((default . -12))
     ((default . -33))
     ((default . -61))
     ((default . -35))
     ((default . *error*) (34 . 128) (35 . 127) (36 . 126) (37 . 125) (38 . 124) (39 . 123))
     ((default . -73) (24 . 20) (25 . 19) (40 . 17))
     ((default . *error*) (16 . 21) (33 . 96))
     ((default . -42))
     ((default . *error*) (16 . 21) (33 . 96))
     ((default . -61))
     ((default . -22))
     ((default . -66) (24 . 20) (25 . 19) (40 . 17))
     ((default . -88))
     ((default . -87))
     ((default . -86))
     ((default . -85))
     ((default . -84))
     ((default . -82))
     ((default . -20))
     ((default . -41) (15 . 71))
     ((default . -69) (24 . 20) (25 . 19) (40 . 17))
    ])

; *** Goto Table ***
(defconst ew:goto-table
  [
     ((1 . 8))
     ((33 . 9))
     ((33 . 10))
     ((33 . 11))
     ((33 . 12))
     ((33 . 13))
     ((33 . 14))
     ((33 . 15))
     ()
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(31 . 26)(28 . 27)(26 . 28)(19 . 29)(18 . 30))
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(30 . 31)(29 . 32)(26 . 28)(19 . 29)(18 . 33))
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 38)(13 . 39)(12 . 40)(10 . 41)(5 . 42)(4 . 43)(3 . 44))
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 38)(13 . 39)(12 . 40)(10 . 41)(5 . 42)(4 . 43)(3 . 45)(2 . 46))
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 47)(15 . 48)(13 . 49)(12 . 40)(5 . 42))
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 47)(15 . 50)(14 . 51)(13 . 49)(12 . 40)(5 . 42))
     ((48 . 22)(44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 47)(13 . 52)(12 . 40)(5 . 42))
     ()
     ((49 . 53))
     ((45 . 54))
     ()
     ()
     ((33 . 55))
     ()
     ((33 . 56))
     ()
     ()
     ((34 . 57)(17 . 58))
     ()
     ()
     ((44 . 23)(43 . 24)(41 . 25)(26 . 59))
     ()
     ((37 . 61))
     ()
     ()
     ((33 . 62))
     ((36 . 64)(23 . 65)(21 . 66)(20 . 67))
     ()
     ()
     ((39 . 69)(34 . 35)(22 . 70))
     ()
     ((40 . 72)(36 . 73))
     ()
     ()
     ()
     ((37 . 74))
     ((37 . 74))
     ()
     ((34 . 35)(22 . 70))
     ((37 . 75))
     ()
     ((37 . 75))
     ()
     ()
     ()
     ()
     ((48 . 22))
     ((48 . 22))
     ((44 . 23)(43 . 24)(41 . 25)(26 . 90)(12 . 40)(5 . 91))
     ((44 . 23)(43 . 24)(41 . 25)(28 . 92)(26 . 28)(19 . 29)(18 . 30))
     ()
     ((33 . 93))
     ((44 . 23)(43 . 24)(41 . 25)(26 . 28)(19 . 29)(18 . 94))
     ((48 . 22))
     ((33 . 95))
     ((46 . 97)(43 . 98)(42 . 99)(24 . 100)(9 . 101)(8 . 102))
     ((44 . 23)(43 . 24)(41 . 25)(26 . 90)(12 . 40)(5 . 103))
     ((39 . 104)(37 . 105))
     ()
     ((33 . 106))
     ((44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 47)(15 . 50)(14 . 107)(13 . 49)(12 . 40)(5 . 42))
     ()
     ((33 . 108))
     ((44 . 23)(43 . 24)(41 . 25)(26 . 109))
     ((46 . 97)(43 . 98)(42 . 99)(24 . 100)(9 . 101)(8 . 110))
     ((44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 38)(13 . 39)(12 . 40)(10 . 41)(5 . 42)(4 . 111))
     ((44 . 23)(43 . 24)(41 . 25)(34 . 35)(26 . 36)(22 . 37)(19 . 29)(18 . 47)(13 . 112)(12 . 40)(5 . 42))
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ((35 . 114))
     ()
     ((48 . 22))
     ()
     ((48 . 22))
     ((47 . 115))
     ((33 . 116))
     ()
     ()
     ()
     ()
     ((40 . 117))
     ((35 . 118))
     ()
     ((36 . 119))
     ((48 . 22))
     ((38 . 121))
     ((48 . 22))
     ()
     ((40 . 117))
     ()
     ()
     ((33 . 122))
     ()
     ()
     ((48 . 22))
     ((46 . 97)(43 . 98)(42 . 99)(24 . 129)(9 . 101))
     ()
     ((46 . 97)(43 . 98)(42 . 99)(24 . 100)(9 . 101)(8 . 130))
     ((33 . 131))
     ()
     ((48 . 22))
     ()
     ()
     ()
     ()
     ()
     ()
     ()
     ((40 . 117))
     ((48 . 22))
    ])

; *** Reduction Table ***
(defconst ew:reduction-table
  (vector
    '()
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (accept $1)))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 1 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 2 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 2 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 3 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 3 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 4 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 4 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 5 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 6 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($4 (aref stack (- sp 1)))
             ($3 (aref stack (- sp 3)))
             ($2 (aref stack (- sp 5)))
             ($1 (aref stack (- sp 7))))
          (lr-push stack (- sp 8) 7 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 7 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 8 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 8 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 9 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($4 (aref stack (- sp 1)))
             ($3 (aref stack (- sp 3)))
             ($2 (aref stack (- sp 5)))
             ($1 (aref stack (- sp 7))))
          (lr-push stack (- sp 8) 10 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 11 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($5 (aref stack (- sp 1)))
             ($4 (aref stack (- sp 3)))
             ($3 (aref stack (- sp 5)))
             ($2 (aref stack (- sp 7)))
             ($1 (aref stack (- sp 9))))
          (lr-push stack (- sp 10) 11 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 12 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 12 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 13 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 13 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 13 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 14 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 14 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 15 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 15 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 16 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 17 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 18 goto-table (ew-mark-phrase (car $1) (cdr $1)))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 19 goto-table $1)))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 19 goto-table (cons (car $1) (cdr $2)))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 20 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 21 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($4 (aref stack (- sp 1)))
             ($3 (aref stack (- sp 3)))
             ($2 (aref stack (- sp 5)))
             ($1 (aref stack (- sp 7))))
          (lr-push stack (- sp 8) 21 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($4 (aref stack (- sp 1)))
             ($3 (aref stack (- sp 3)))
             ($2 (aref stack (- sp 5)))
             ($1 (aref stack (- sp 7))))
          (lr-push stack (- sp 8) 22 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 23 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 23 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 24 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 24 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 25 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 26 goto-table $1)))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 26 goto-table $1)))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 27 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 28 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 28 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 29 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 29 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 30 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 30 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 31 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 31 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($1 (aref stack (- sp 1))))
          (lr-push stack (- sp 2) 32 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 32 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 33 goto-table nil)))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 33 goto-table (cons (if $1 (car $1) $2) $2))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 33 goto-table (cons (if $1 (car $1) $2) $2))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 33 goto-table (cons (if $1 (car $1) (car $2)) (cdr $2)))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 34 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 35 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 36 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 37 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 38 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 39 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 40 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 41 goto-table (cons (car $1) (if $2 (cdr $2) (cdr $1))))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 42 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 43 goto-table (cons $1 (if $2 (cdr $2) $1)))))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 44 goto-table (cons $1 $3))))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 45 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 45 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 45 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 45 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 45 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 45 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 46 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 47 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 47 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 47 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 47 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 47 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 47 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($3 (aref stack (- sp 1)))
             ($2 (aref stack (- sp 3)))
             ($1 (aref stack (- sp 5))))
          (lr-push stack (- sp 6) 48 goto-table (cons $1 $3))))
    (lambda (stack sp goto-table $lookahead)
      (let* ()
          (lr-push stack (- sp 0) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
    (lambda (stack sp goto-table $lookahead)
      (let* (($2 (aref stack (- sp 1)))
             ($1 (aref stack (- sp 3))))
          (lr-push stack (- sp 4) 49 goto-table ())))
  ))

; *** Parser Definition ***
(defun ew-parse(scanner errorhandler)
  (lr-parse scanner errorhandler 
    ew:action-table
    ew:goto-table
    ew:reduction-table
    ew:token-defs))

; *** Footer ***
(put 'ew:cm-texts-tok 'decode 'ew-decode-comment)
(put 'ew:cm-wsp-tok 'decode 'ew-decode-comment)
(put 'ew:cm-fold-tok 'decode 'ew-decode-comment)
(put 'ew:cm-qfold-tok 'decode 'ew-decode-comment)
(put 'ew:cm-qpair-tok 'decode 'ew-decode-comment)
(put 'ew:us-texts-tok 'decode 'ew-decode-unstructured)
(put 'ew:us-wsp-tok 'decode 'ew-decode-unstructured)
(put 'ew:us-fold-tok 'decode 'ew-decode-unstructured)


