(setq load-path (cons "." load-path))
(require 'ew-dec)
(require 'ew-line)

(defun decode-doodle (src &rest opts)
  (setq ew-decode-field-cache-buf nil)
  (let ((ew-decode-sticked-encoded-word nil)
	(ew-decode-quoted-encoded-word nil)
	(ew-ignore-75bytes-limit (memq 'ignore-75bytes-limit opts))
	(ew-ignore-76bytes-limit (memq 'ignore-76bytes-limit opts))
	(ew-permit-sticked-comment (memq 'permit-sticked-comment opts))
	(ew-permit-sticked-special (memq 'permit-sticked-special opts))
	(ew-permit-null-encoded-text nil))
    (string-match "\\`[^:]*:" src)
    (let* ((field-name (substring src
				  (match-beginning 0)
				  (1- (match-end 0))))
	   (field-body (substring src (match-end 0)))
	   (result (ew-crlf-unfold
		    (concat field-name ":"
			    (ew-decode-field field-name field-body)))))
      result)))

(defun encode-doodle (src &rest opts)
  nil)

(defun report-doodle ()
  (report 'decode-doodle 'encode-doodle))

(defun report-doodle-verbose ()
  (report 'decode-doodle 'encode-doodle t))
